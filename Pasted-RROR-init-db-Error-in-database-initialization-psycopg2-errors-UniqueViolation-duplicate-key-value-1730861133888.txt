RROR:init_db:Error in database initialization: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "pg_class_relname_nsp_index"
DETAIL:  Key (relname, relnamespace)=(question_id_seq, 58082) already exists.

[SQL: 
CREATE TABLE question (
    id SERIAL NOT NULL, 
    text VARCHAR(500) NOT NULL, 
    question_type VARCHAR(50) NOT NULL, 
    options JSON, 
    required BOOLEAN NOT NULL, 
    validation_rules JSON, 
    parent_question_id INTEGER, 
    parent_answer VARCHAR(500), 
    "order" INTEGER, 
    PRIMARY KEY (id), 
    FOREIGN KEY(parent_question_id) REFERENCES question (id)
)

]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
ERROR:__main__:Error initializing database: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "pg_class_relname_nsp_index"
DETAIL:  Key (relname, relnamespace)=(question_id_seq, 58082) already exists.

[SQL: 
CREATE TABLE question (
    id SERIAL NOT NULL, 
    text VARCHAR(500) NOT NULL, 
    question_type VARCHAR(50) NOT NULL, 
    options JSON, 
    required BOOLEAN NOT NULL, 
    validation_rules JSON, 
    parent_question_id INTEGER, 
    parent_answer VARCHAR(500), 
    "order" INTEGER, 
    PRIMARY KEY (id), 
    FOREIGN KEY(parent_question_id) REFERENCES question (id)
)

]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
INFO:init_db:All questions initialized successfully
/home/runner/S1Cloud/main.py:91: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  question = Question.query.get(1)
INFO:app:Initializing app with database URL pattern: postgresql://*****@*****
INFO:init_db:All questions initialized successfully
/home/runner/S1Cloud/main.py:91: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  question = Question.query.get(1)
INFO:app:Initializing app with database URL pattern: postgresql://*****@*****
INFO:app:Initializing app with database URL pattern: postgresql://*****@*****
ERROR:init_db:Error in database initialization: (psycopg2.errors.UndefinedTable) relation "question" does not exist
LINE 2: FROM question 
             ^

[SQL: SELECT question.id AS question_id, question.text AS question_text, question.question_type AS question_question_type, question.options AS question_options, question.required AS question_required, question.validation_rules AS question_validation_rules, question.parent_question_id AS question_parent_question_id, question.parent_answer AS question_parent_answer, question."order" AS question_order 
FROM question 
WHERE question.id = %(pk_1)s]
[parameters: {'pk_1': 1}]
(Background on this error at: https://sqlalche.me/e/20/f405)
ERROR:__main__:Error initializing database: (psycopg2.errors.UndefinedTable) relation "question" does not exist
LINE 2: FROM question 
             ^

[SQL: SELECT question.id AS question_id, question.text AS question_text, question.question_type AS question_question_type, question.options AS question_options, question.required AS question_required, question.validation_rules AS question_validation_rules, question.parent_question_id AS question_parent_question_id, question.parent_answer AS question_parent_answer, question."order" AS question_order 
FROM question 
WHERE question.id = %(pk_1)s]
[parameters: {'pk_1': 1}]
(Background on this error at: https://sqlalche.me/e/20/f405)
INFO:app:Initializing app with database URL pattern: postgresql://*****@*****
ERROR:init_db:Error adding question: (psycopg2.errors.UndefinedTable) relation "question" does not exist
LINE 1: INSERT INTO question (text, question_type, options, required...
                    ^

[SQL: INSERT INTO question (text, question_type, options, required, validation_rules, parent_question_id, parent_answer, "order") VALUES (%(text)s, %(question_type)s, %(options)s::JSON, %(required)s, %(validation_rules)s::JSON, %(parent_question_id)s, %(parent_answer)s, %(order)s) RETURNING question.id]
[parameters: {'text': 'How effective are your current offensive security measures in the cloud?', 'question_type': 'multiple_choice', 'options': '[{"title": "a) Not effective", "description": "", "icon": "check-circle"}, {"title": "b) Limited", "description": "", "icon": "check-circle"}, {"titl ... (78 characters truncated) ... itle": "d) Highly effective", "description": "", "icon": "check-circle"}, {"title": "e) Fully effective", "description": "", "icon": "check-circle"}]', 'required': True, 'validation_rules': '{"min_count": 1, "max_count": 1}', 'parent_question_id': 1, 'parent_answer': 'Achieving Key Business Outcomes', 'order': 11}]
(Background on this error at: https://sqlalche.me/e/20/f405)
ERROR:init_db:Error in database initialization: (psycopg2.errors.UndefinedTable) relation "question" does not exist
LINE 1: INSERT INTO question (text, question_type, options, required...
                    ^

[SQL: INSERT INTO question (text, question_type, options, required, validation_rules, parent_question_id, parent_answer, "order") VALUES (%(text)s, %(question_type)s, %(options)s::JSON, %(required)s, %(validation_rules)s::JSON, %(parent_question_id)s, %(parent_answer)s, %(order)s) RETURNING question.id]
[parameters: {'text': 'How effective are your current offensive security measures in the cloud?', 'question_type': 'multiple_choice', 'options': '[{"title": "a) Not effective", "description": "", "icon": "check-circle"}, {"title": "b) Limited", "description": "", "icon": "check-circle"}, {"titl ... (78 characters truncated) ... itle": "d) Highly effective", "description": "", "icon": "check-circle"}, {"title": "e) Fully effective", "description": "", "icon": "check-circle"}]', 'required': True, 'validation_rules': '{"min_count": 1, "max_count": 1}', 'parent_question_id': 1, 'parent_answer': 'Achieving Key Business Outcomes', 'order': 11}]
(Background on this error at: https://sqlalche.me/e/20/f405)
ERROR:__main__:Error initializing database: (psycopg2.errors.UndefinedTable) relation "question" does not exist
LINE 1: INSERT INTO question (text, question_type, options, required...
                    ^

[SQL: INSERT INTO question (text, question_type, options, required, validation_rules, parent_question_id, parent_answer, "order") VALUES (%(text)s, %(question_type)s, %(options)s::JSON, %(required)s, %(validation_rules)s::JSON, %(parent_question_id)s, %(parent_answer)s, %(order)s) RETURNING question.id]
[parameters: {'text': 'How effective are your current offensive security measures in the cloud?', 'question_type': 'multiple_choice', 'options': '[{"title": "a) Not effective", "description": "", "icon": "check-circle"}, {"title": "b) Limited", "description": "", "icon": "check-circle"}, {"titl ... (78 characters truncated) ... itle": "d) Highly effective", "description": "", "icon": "check-circle"}, {"title": "e) Fully effective", "description": "", "icon": "check-circle"}]', 'required': True, 'validation_rules': '{"min_count": 1, "max_count": 1}', 'parent_question_id': 1, 'parent_answer': 'Achieving Key Business Outcomes', 'order': 11}]
(Background on this error at: https://sqlalche.me/e/20/f405)
INFO:init_db:All questions initialized successfully
/home/runner/S1Cloud/main.py:91: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  question = Question.query.get(1)
/home/runner/S1Cloud/main.py:29: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  question = Question.query.get(1)
/home/runner/S1Cloud/main.py:34: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  user = User.query.get(st.session_state.user_id)
